import request from 'supertest';
import { app } from '../app';

describe("Test case for user api", (): void => {
    let token: string = '';

    describe("Test case for create user", (): void => {

        it("If passing body is unappropriate", async (): Promise<void> => {
            const response = await request(app.callback()).post('/user').send({
                firstName: "Sanjana Sharma",
                email: "sanjana@gmail.com",
                password: "12345678"
            });
            expect(response.statusCode).toBe(406);
        })

        it("If the user is successfully created", async (): Promise<void> => {
            const response = await request(app.callback()).post('/user').send({
                userName: "Sanjana001",
                fullName: "Sanjana",
                email: "sanjana@gmail.com",
                password: "12345678"
            });
            expect(response.statusCode).toBe(201);
            expect(response.type).toBe("application/json");
        })

    })

    describe("Test case for user login", (): void => {

        it("If user enters wrong credentials", async (): Promise<void> => {
            const response = await request(app.callback()).post('/user/login').send({
                email: "sanjana@gmail.com",
                password: "1234567823"
            });
            expect(response.statusCode).toBe(401);
        })

        it("If user is successfully logged in", async (): Promise<void> => {
            const response = await request(app.callback()).post('/user/login').send({
                email: "sanjana@gmail.com",
                password: "12345678"
            });
            expect(response.statusCode).toBe(200);
            expect(response.type).toBe("application/json");
            token = JSON.parse(response.text).data.token;
        })

    })

    describe("Test case for read user", (): void => {

        it("If user is not logged in", async (): Promise<void> => {
            const response = await request(app.callback()).get('/user/id');
            expect(response.statusCode).toBe(401);
        })

        it("If user is logged in", async (): Promise<void> => {
            const response = await request(app.callback()).get('/user/id').set("Authorization", `Bearer ${token}`);
            expect(response.statusCode).toBe(200);
        })

    })

    describe("Test case for update user", (): void => {

        it("If user is not logged in", async (): Promise<void> => {
            const response = await request(app.callback()).put('/user').send({
                userName: 'Sanjana',
                fullName: 'Sanjana',
                email: 'sanjana@gmail.com',
                password: '123456789'
            });
            expect(response.statusCode).toBe(401);
        })

        it("If user data is not appropriate", async (): Promise<void> => {
            const response = await request(app.callback()).put('/user').set('Authorization', `Bearer ${token}`).send({
                userName: 'Sanjana',
                fullName: 'Sanjana',
                email: 'sanjana@gmail.com',
            });
            expect(response.statusCode).toBe(406);
        })

        it("If user is successfullu updated", async (): Promise<void> => {
            const response = await request(app.callback()).put('/user').set('Authorization', `Bearer ${token}`).send({
                userName: 'Sanjana',
                fullName: 'Sanjana',
                email: 'sanjana@gmail.com',
                password: '123456789'
            });
            expect(response.statusCode).toBe(201);
        })

    })

    describe("Test case for delete user", (): void => {

        it("If user is not logged in", async (): Promise<void> => {
            const response = await request(app.callback()).delete('/user');
            expect(response.statusCode).toBe(401);
        })

        it("If user is successfully deleted", async (): Promise<void> => {
            const response = await request(app.callback()).delete('/user').set('Authorization', `Bearer ${token}`);
            expect(response.statusCode).toBe(200);
        })

    })

})

// testing for query